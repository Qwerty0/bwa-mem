<tool id="bwa_mem" name="BWA-MEM mapper" version="0.1">

  <requirements>
    <requirement type="package" version="0.7.5a">bwa</requirement>
  </requirements>
  
  <description></description>
  <!--
  <parallelism method="basic"></parallelism>
  <command>bwa mem $ref_prefix $reads_1 $reads_2 > $output</command>
  -->
  <command>
#if not $ref.isindexed:
  ln -s $reference ref.fa &amp;&amp; bwa index -a bwtsw ref.fa &amp;&amp;
#end if
bwa mem
#if $options.advanced:
  -k $seed -w $bandwidth -d $zdropoff -r $reseed
#end if
#if $ref.isindexed:
  $ref.index.fields.path
#else
  ref.fa
#end if
$input1
#if $reads.paired:
  $input2
#end if
&gt; $output
</command>

  <inputs>

    <conditional name="ref">
      <param name="isindexed" type="select" label="Will you select a reference genome from your history or use a built-in index?">
        <option value="true">Use a built-in index</option>
        <option value="">Use one from your history</option>
      </param>
      <when value="true">
        <param name="index" type="select" label="Select a reference genome">
          <options from_data_table="bwa_indexes">
            <filter type="sort_by" column="2" />
            <validator type="no_options" message="No indexes are available" />
          </options>
        </param>
      </when>
      <when value="">
        <param name="reference" type="data" format="fasta" metadata_name="dbkey" label="Select a reference from your history" />
      </when>
    </conditional>
    <!-- ask user if reference file is over 2GB? -->
    <conditional name="reads">
      <param name="paired" type="select" label="Is this library mate-paired?">
        <option value="">Single-end</option>
        <option value="true">Paired-end</option>
      </param>
      <when value="">
        <param name="input1" type="data" format="fastqsanger,fastqillumina" label="FASTQ file" help="FASTQ with either Sanger-scaled quality values (fastqsanger) or Illumina-scaled quality values (fastqillumina)" />
      </when>
      <when value="true">
        <param name="input1" type="data" format="fastqsanger,fastqillumina" label="Forward FASTQ file" help="FASTQ with either Sanger-scaled quality values (fastqsanger) or Illumina-scaled quality values (fastqillumina)" />
        <param name="input2" type="data" format="fastqsanger,fastqillumina" label="Reverse FASTQ file" help="FASTQ with either Sanger-scaled quality values (fastqsanger) or Illumina-scaled quality values (fastqillumina)" />
      </when>
    </conditional>

    <conditional name="options">
      <param name="advanced" type="select" label="Use advanced options?">
        <option value="">default options</option>
        <option value="true">advanced options</option>
      </param>
      <when value="" />
      <when value="true">
        <param name="seed" type="integer" label="Minimum seed length" help="Matches shorter than this will be missed." value="19" />
        <param name="bandwidth" type="integer" label="Band width" help="Gaps longer than this will not be found." value="100" />
        <param name="zdropoff" type="integer" label="Off-diagonal X-dropoff (Z-dropoff)" help="Stop extension when the difference between the best and the current extension score is above |i-j|*A+dropoff" value="100" />
        <param name="reseed" type="float" label="Trigger re-seeding for a MEM longer than minSeedLen*[this]" help="Larger value yields fewer seeds, which leads to faster alignment speed but lower accuracy" value="1.5" />
        <param name="cutoff" type="integer" label="MEM count cutoff" help="Discard a MEM if it has more than this many occurences in the genome" value="10000" />
      </when>
    </conditional>

  </inputs>

  <outputs>
    <data name="output" format="sam" />
  </outputs>

  <stdio>
    <exit_code range="1:" err_level="fatal"/>
    <exit_code range=":-1" err_level="fatal"/>
  </stdio>

</tool>